//作用域概述

/* 
通常来说，一段程序代码中所用到的名字并不总是`有效`和`可用`的，而限定这个名字的可用性的代码范围就是这个名字的作用域。作用域的使用**提高了程序逻辑的局部性**，**增强了程序的可靠性**，**减少了名字冲突**。
*/

// 作用域分类
/* 
- 全局作用域：整个script标签或者是一个单独的js文件
- 局部作用域：在函数内部就是局部作用域，只在函数内部起效果和作用
*/
var num = 10
var num = 20
//全局作用域：整个script标签或者是一个单独的js文件
console.log(num);//20

function fn1() {
    var num = 30
    // 局部作用域：在函数内部就是局部作用域，只在函数内部起效果和作用
    console.log(num);
}
fn1()//30

//变量的作用域

//变量的作用域分类

/* 
- 全局变量：在全局作用域下的变量，在全局下也可以使用。如果在函数内部，没有声明直接赋值的变量也属于全局变量。
- 局部变量
 */
var num2 = 11;
function fn2(argus) {
    console.log(num2);//11
    var num3 = 15
    num4 = 33
}
// console.log(num3); // num3 is not defined
fn2()
console.log(num4);//33
